07/10/2023
I have written a small page to demonstrate service workers and cache. The intent is to cache the 'helloWorld.html' file to demonstrate offline functionality. Further testing is needed.
09/10/2023
I have set up an Django application to handle the remote database in the future, I am considering using DynamoDB to do this. I will further explore this once I learn more about OSM data and how to store it.
11/10/2023
I have begun experimenting and for now believe that using IndexedDB is more suitable to Web Storage as it offers a better (and much needed) scalability. Further testing is needed to reach a conclusion on which technology to use. Lastly, a bug in which service workers were not being registered has been fixed.
14/10/2023
While IndexedDB involved a more significant learning curve, I have decided to go forward with IndexedDB as scalability is necessary. I have also made a basic page that allows users to draw shapes using HTML5 canvas. I am considering using Mapbox for processing and displaying OSM data, further experimentation is needed to decide which API is appropiate for the project's requirements.
17/10/2023
The canvas page works as intended. Next up I will make a simple page to display OSM data and explore possible forms of remote database storage, processing, and local storage of such data.
18/10/2023
This page allows an .osm file to be uploaded and its contents displayed as elements (nodes) in a list. The sample used was OSM data of Antartica. The next challenge will be to turn such data into a map, how to store this data in a remote database, and how to make it lightweight for the client to render. I will be experimenting with Mapbox to achieve this.
23/10/2023
Now that the page to display the contents of an .osm file works correctly. I will continue investigating Mapbox and possible integration with a remote and local database. So far the most notable candidates are MongoDB and DynamoDB for remote database and noSQL (as part of IndexedDB) for local database. 
04/11/2023
I have a better idea of the scope of my project now. The main idea is that the application allows users to leave messages behind (based on their location). This will be the main focus of the application, and for mapping I will use high level APIs such as Leaflet.js. I will further explore how this will affect the choice of other tools used.
18/11/2023
I now have a more clear idea on how to conduct testing. While so far testing has been done manually and using developer tools, I will implement unit tests with Jest for JavaScript. Django also has built in testing, however there is no code in the backend that requires testing at the moment. In the future end-to-end and integration testing will be implemented with APIs such as Selenium.
03/11/2023
I have done some basic testing using Jest on my proofs of concepts. I now have a better picture of how to handle content moderation, which will be, first and foremost, using keyword lists. This approach has many limitations, so if development allows I intend to train a language model and implement human moderation.
17/12/2023
After experimenting with many different ways of generating tiles (QGIS, Tilemaker, etc.), I have decided to use a small area of the UK with raster tiles. The biggest limiting factor is the limits on cache size. Just vector tiles of the UK would (generally) be 2GB big. I will be focusing on other features for the moment.
25/12/2023
The main messaging functionality with IndexedDB and DynamoDB is complete. There is still some improvements that can be made with styling, as well as expanding the map. The next step is implementing moderation: first simple automated moderation with keyword lists, then human moderation and potentially using an LLM with AWS Comprehend.